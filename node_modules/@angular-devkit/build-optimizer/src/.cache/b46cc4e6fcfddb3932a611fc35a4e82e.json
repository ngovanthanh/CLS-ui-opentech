{"remainingRequest":"/home/ict/cloudstack-ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/ict/cloudstack-ui/node_modules/@ng-idle/core/src/documentinterruptsource.js","dependencies":[{"path":"/home/ict/cloudstack-ui/node_modules/@ng-idle/core/src/documentinterruptsource.js","mtime":1522328033000},{"path":"/home/ict/cloudstack-ui/node_modules/cache-loader/dist/cjs.js","mtime":1534015689334},{"path":"/home/ict/cloudstack-ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\nimport { EventTargetInterruptSource } from './eventtargetinterruptsource';\n/*\n * An interrupt source that uses events on the document element (html tag).\n */\nvar /*\n * An interrupt source that uses events on the document element (html tag).\n */ DocumentInterruptSource = (function (_super) {\n    __extends(DocumentInterruptSource, _super);\n    function DocumentInterruptSource(events, options) {\n        return _super.call(this, document.documentElement, events, options) || this;\n    }\n    /*\n     * Checks to see if the event should be filtered.\n     * @param event - The original event object.\n     * @return True if the event should be filtered (don't cause an interrupt); otherwise, false.\n     */\n    /*\n       * Checks to see if the event should be filtered.\n       * @param event - The original event object.\n       * @return True if the event should be filtered (don't cause an interrupt); otherwise, false.\n       */\n    DocumentInterruptSource.prototype.filterEvent = /*\n       * Checks to see if the event should be filtered.\n       * @param event - The original event object.\n       * @return True if the event should be filtered (don't cause an interrupt); otherwise, false.\n       */\n        function (event) {\n            // some browser bad input hacks\n            if (event.type === 'mousemove'\n                && ((event.originalEvent && event.originalEvent.movementX === 0 &&\n                    event.originalEvent.movementY === 0)\n                    || (event.movementX !== void 0 && !event.movementX || !event.movementY))) {\n                return true;\n            }\n            return false;\n        };\n    return DocumentInterruptSource;\n}(EventTargetInterruptSource));\n/*\n * An interrupt source that uses events on the document element (html tag).\n */\nexport { DocumentInterruptSource };\n//# sourceMappingURL=documentinterruptsource.js.map \n",null]}