{"remainingRequest":"/home/ict/cloudstack-ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/ict/cloudstack-ui/node_modules/@ng-idle/core/src/interrupt.js","dependencies":[{"path":"/home/ict/cloudstack-ui/node_modules/@ng-idle/core/src/interrupt.js","mtime":1522328033000},{"path":"/home/ict/cloudstack-ui/node_modules/cache-loader/dist/cjs.js","mtime":1534015689334},{"path":"/home/ict/cloudstack-ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["/*\n * A class for managing an interrupt from an interrupt source.\n */\nvar /*\n * A class for managing an interrupt from an interrupt source.\n */\nInterrupt = (function () {\n    function Interrupt(source) {\n        this.source = source;\n    }\n    /*\n     * Subscribes to the interrupt using the specified function.\n     * @param fn - The subscription function.\n     */\n    /*\n       * Subscribes to the interrupt using the specified function.\n       * @param fn - The subscription function.\n       */\n    Interrupt.prototype.subscribe = /*\n       * Subscribes to the interrupt using the specified function.\n       * @param fn - The subscription function.\n       */\n    function (fn) {\n        this.sub = this.source.onInterrupt.subscribe(fn);\n    };\n    /*\n     * Unsubscribes the interrupt.\n     */\n    /*\n       * Unsubscribes the interrupt.\n       */\n    Interrupt.prototype.unsubscribe = /*\n       * Unsubscribes the interrupt.\n       */\n    function () {\n        this.sub.unsubscribe();\n        this.sub = null;\n    };\n    /*\n     * Keeps the subscription but resumes interrupt events.\n     */\n    /*\n       * Keeps the subscription but resumes interrupt events.\n       */\n    Interrupt.prototype.resume = /*\n       * Keeps the subscription but resumes interrupt events.\n       */\n    function () {\n        this.source.attach();\n    };\n    /*\n     * Keeps the subscription but pauses interrupt events.\n     */\n    /*\n       * Keeps the subscription but pauses interrupt events.\n       */\n    Interrupt.prototype.pause = /*\n       * Keeps the subscription but pauses interrupt events.\n       */\n    function () {\n        this.source.detach();\n    };\n    return Interrupt;\n}());\n/*\n * A class for managing an interrupt from an interrupt source.\n */\nexport { Interrupt };\n//# sourceMappingURL=interrupt.js.map",null]}