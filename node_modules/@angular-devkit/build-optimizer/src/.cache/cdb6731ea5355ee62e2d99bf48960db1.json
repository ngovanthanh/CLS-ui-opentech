{"remainingRequest":"/home/ict/cloudstack-ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/ict/cloudstack-ui/node_modules/@ng-idle/keepalive/src/keepalive.js","dependencies":[{"path":"/home/ict/cloudstack-ui/node_modules/@ng-idle/keepalive/src/keepalive.js","mtime":1522328033000},{"path":"/home/ict/cloudstack-ui/node_modules/cache-loader/dist/cjs.js","mtime":1534015689334},{"path":"/home/ict/cloudstack-ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { HttpClient, HttpRequest } from '@angular/common/http';\nimport { KeepaliveSvc } from '@ng-idle/core';\n/**\n * An example of an injectable service.\n */\nvar Keepalive = /*@__PURE__*/ (function (_super) {\n    __extends(Keepalive, _super);\n    /*\n     * Initializes a new instance of Keepalive\n     * @param http - The HTTP service.\n     */\n    function Keepalive(http) {\n        var _this = _super.call(this) || this;\n        _this.http = http;\n        _this.pingInterval = 10 * 60;\n        /*\n           * An event emitted when the service is pinging.\n           */\n        _this.onPing = new EventEmitter;\n        /*\n           * An event emitted when the service has pinged an HTTP endpoint and received a response.\n           */\n        _this.onPingResponse = new EventEmitter();\n        return _this;\n    }\n    /*\n     * Sets the string or Request that should be used when pinging.\n     * @param url - The URL or Request object to use when pinging.\n     * @return The current Request used when pinging.\n     */\n    /*\n       * Sets the string or Request that should be used when pinging.\n       * @param url - The URL or Request object to use when pinging.\n       * @return The current Request used when pinging.\n       */\n    Keepalive.prototype.request = /*\n       * Sets the string or Request that should be used when pinging.\n       * @param url - The URL or Request object to use when pinging.\n       * @return The current Request used when pinging.\n       */\n        function (url) {\n            if (typeof url === 'string') {\n                this.pingRequest = new HttpRequest('GET', url);\n            }\n            else if (url instanceof HttpRequest) {\n                this.pingRequest = url;\n            }\n            else if (url === null) {\n                this.pingRequest = null;\n            }\n            return this.pingRequest;\n        };\n    /*\n     * Sets the interval (in seconds) at which the ping operation will occur when start() is called.\n     * @param seconds - The ping interval in seconds.\n     * @return The current interval value.\n     */\n    /*\n       * Sets the interval (in seconds) at which the ping operation will occur when start() is called.\n       * @param seconds - The ping interval in seconds.\n       * @return The current interval value.\n       */\n    Keepalive.prototype.interval = /*\n       * Sets the interval (in seconds) at which the ping operation will occur when start() is called.\n       * @param seconds - The ping interval in seconds.\n       * @return The current interval value.\n       */\n        function (seconds) {\n            if (!isNaN(seconds) && seconds > 0) {\n                this.pingInterval = seconds;\n            }\n            else if (!isNaN(seconds) && seconds <= 0) {\n                throw new Error('Interval value must be greater than zero.');\n            }\n            return this.pingInterval;\n        };\n    /*\n     * Immediately performs the ping operation. If a request has been set, an HTTP\n     * request will be made and the response will be emitted via the\n     * onPingResponse event.\n     */\n    /*\n       * Immediately performs the ping operation. If a request has been set, an HTTP\n       * request will be made and the response will be emitted via the\n       * onPingResponse event.\n       */\n    Keepalive.prototype.ping = /*\n       * Immediately performs the ping operation. If a request has been set, an HTTP\n       * request will be made and the response will be emitted via the\n       * onPingResponse event.\n       */\n        function () {\n            var _this = this;\n            this.onPing.emit(null);\n            if (this.pingRequest) {\n                this.http.request(this.pingRequest).subscribe(function (response) {\n                    _this.onPingResponse.emit(response);\n                });\n            }\n        };\n    /*\n     * Starts pinging on an interval.\n     */\n    /*\n       * Starts pinging on an interval.\n       */\n    Keepalive.prototype.start = /*\n       * Starts pinging on an interval.\n       */\n        function () {\n            var _this = this;\n            this.stop();\n            this.pingHandle = setInterval(function () {\n                _this.ping();\n            }, this.pingInterval * 1000);\n        };\n    /*\n     * Stops pinging on an interval.\n     */\n    /*\n       * Stops pinging on an interval.\n       */\n    Keepalive.prototype.stop = /*\n       * Stops pinging on an interval.\n       */\n        function () {\n            if (this.hasPingHandle()) {\n                clearInterval(this.pingHandle);\n                this.pingHandle = null;\n            }\n        };\n    /*\n     * Performs any cleanup tasks when Angular destroys the instance.\n     */\n    /*\n       * Performs any cleanup tasks when Angular destroys the instance.\n       */\n    Keepalive.prototype.ngOnDestroy = /*\n       * Performs any cleanup tasks when Angular destroys the instance.\n       */\n        function () {\n            this.stop();\n        };\n    /*\n     * Returns whether or not the service will ping automatically at the specified interval.\n     * @return True if the service will ping at the specified interval; otherwise, false.\n     */\n    /*\n       * Returns whether or not the service will ping automatically at the specified interval.\n       * @return True if the service will ping at the specified interval; otherwise, false.\n       */\n    Keepalive.prototype.isRunning = /*\n       * Returns whether or not the service will ping automatically at the specified interval.\n       * @return True if the service will ping at the specified interval; otherwise, false.\n       */\n        function () {\n            return this.hasPingHandle();\n        };\n    Keepalive.prototype.hasPingHandle = function () {\n        return this.pingHandle !== null && typeof this.pingHandle !== 'undefined';\n    };\n    return Keepalive;\n}(KeepaliveSvc));\nexport { Keepalive };\n//# sourceMappingURL=keepalive.js.map \n",null]}