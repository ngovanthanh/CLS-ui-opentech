{"remainingRequest":"/home/ict/cloudstack-ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/ict/cloudstack-ui/node_modules/@ng-idle/core/src/interruptsource.js","dependencies":[{"path":"/home/ict/cloudstack-ui/node_modules/@ng-idle/core/src/interruptsource.js","mtime":1522328033000},{"path":"/home/ict/cloudstack-ui/node_modules/cache-loader/dist/cjs.js","mtime":1534015689334},{"path":"/home/ict/cloudstack-ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { EventEmitter } from '@angular/core';\n/*\n * A base for classes that act as a source for interrupts.\n */\nvar /*\n * A base for classes that act as a source for interrupts.\n */\nInterruptSource = (function () {\n    function InterruptSource(attachFn, detachFn) {\n        this.attachFn = attachFn;\n        this.detachFn = detachFn;\n        this.isAttached = false;\n        this.onInterrupt = new EventEmitter();\n    }\n    /*\n     * Attaches to the specified events on the specified source.\n     */\n    /*\n       * Attaches to the specified events on the specified source.\n       */\n    InterruptSource.prototype.attach = /*\n       * Attaches to the specified events on the specified source.\n       */\n    function () {\n        var _this = this;\n        // If the current zone is the 'angular' zone (a.k.a. NgZone) then re-enter this method in its parent zone\n        // The parent zone is usually the '<root>' zone but it can also be 'long-stack-trace-zone' in debug mode\n        // In tests, the current zone is typically a 'ProxyZone' created by async/fakeAsync (from @angular/core/testing)\n        if (Zone.current.get('isAngularZone') === true) {\n            Zone.current.parent.run(function () { return _this.attach(); });\n            return;\n        }\n        if (!this.isAttached && this.attachFn) {\n            this.attachFn(this);\n        }\n        this.isAttached = true;\n    };\n    /*\n     * Detaches from the specified events on the specified source.\n     */\n    /*\n       * Detaches from the specified events on the specified source.\n       */\n    InterruptSource.prototype.detach = /*\n       * Detaches from the specified events on the specified source.\n       */\n    function () {\n        if (this.isAttached && this.detachFn) {\n            this.detachFn(this);\n        }\n        this.isAttached = false;\n    };\n    return InterruptSource;\n}());\n/*\n * A base for classes that act as a source for interrupts.\n */\nexport { InterruptSource };\n//# sourceMappingURL=interruptsource.js.map",null]}