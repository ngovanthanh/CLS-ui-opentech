{"remainingRequest":"/home/ict/cloudstack-ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/ict/cloudstack-ui/node_modules/@ng-idle/core/src/idleexpiry.js","dependencies":[{"path":"/home/ict/cloudstack-ui/node_modules/@ng-idle/core/src/idleexpiry.js","mtime":1522328033000},{"path":"/home/ict/cloudstack-ui/node_modules/cache-loader/dist/cjs.js","mtime":1534015689334},{"path":"/home/ict/cloudstack-ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["/*\n * Represents a base class for types that provide expiry detection for the Idle service.\n */\nvar /*\n * Represents a base class for types that provide expiry detection for the Idle service.\n */\nIdleExpiry = (function () {\n    function IdleExpiry() {\n        this.idValue = new Date();\n        this.idlingValue = false;\n    }\n    /*\n     * Gets or sets a unique ID for the window\n     * @param id - The id.\n     * @return The current id.\n     */\n    /*\n       * Gets or sets a unique ID for the window\n       * @param id - The id.\n       * @return The current id.\n       */\n    IdleExpiry.prototype.id = /*\n       * Gets or sets a unique ID for the window\n       * @param id - The id.\n       * @return The current id.\n       */\n    function (value) {\n        if (value !== void 0) {\n            if (!value) {\n                throw new Error('A value must be specified for the ID.');\n            }\n            this.idValue = value;\n        }\n        return this.idValue;\n    };\n    /*\n     * Gets or sets the idling value.\n     * @param value - The value to set.\n     * @return The idling value.\n     */\n    /*\n       * Gets or sets the idling value.\n       * @param value - The value to set.\n       * @return The idling value.\n       */\n    IdleExpiry.prototype.idling = /*\n       * Gets or sets the idling value.\n       * @param value - The value to set.\n       * @return The idling value.\n       */\n    function (value) {\n        if (value !== void 0) {\n            this.idlingValue = value;\n        }\n        return this.idlingValue;\n    };\n    /*\n     * Returns the current Date.\n     * @return The current Date.\n     */\n    /*\n       * Returns the current Date.\n       * @return The current Date.\n       */\n    IdleExpiry.prototype.now = /*\n       * Returns the current Date.\n       * @return The current Date.\n       */\n    function () {\n        return new Date();\n    };\n    /*\n     * Returns whether or not it is expired.\n     * @return True if expired; otherwise, false.\n     */\n    /*\n       * Returns whether or not it is expired.\n       * @return True if expired; otherwise, false.\n       */\n    IdleExpiry.prototype.isExpired = /*\n       * Returns whether or not it is expired.\n       * @return True if expired; otherwise, false.\n       */\n    function () {\n        var expiry = this.last();\n        return expiry != null && expiry <= this.now();\n    };\n    return IdleExpiry;\n}());\n/*\n * Represents a base class for types that provide expiry detection for the Idle service.\n */\nexport { IdleExpiry };\n//# sourceMappingURL=idleexpiry.js.map",null]}