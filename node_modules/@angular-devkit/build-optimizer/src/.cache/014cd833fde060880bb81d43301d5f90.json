{"remainingRequest":"/home/ict/cloudstack-ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/ict/cloudstack-ui/node_modules/@ng-idle/core/src/alternativestorage.js","dependencies":[{"path":"/home/ict/cloudstack-ui/node_modules/@ng-idle/core/src/alternativestorage.js","mtime":1522328033000},{"path":"/home/ict/cloudstack-ui/node_modules/cache-loader/dist/cjs.js","mtime":1534015689334},{"path":"/home/ict/cloudstack-ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["/*\n * Represents an alternative storage for browser that doesn't support localstorage. (i.e. Safari in\n * private mode)\n * @implements Storage\n */\nvar /*\n * Represents an alternative storage for browser that doesn't support localstorage. (i.e. Safari in\n * private mode)\n * @implements Storage\n */\nAlternativeStorage = (function () {\n    function AlternativeStorage() {\n        this.storageMap = {};\n    }\n    Object.defineProperty(AlternativeStorage.prototype, \"length\", {\n        /*\n         * Returns an integer representing the number of data items stored in the storageMap object.\n         */\n        get: /*\n           * Returns an integer representing the number of data items stored in the storageMap object.\n           */\n        function () {\n            return Object.keys(this.storageMap).length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /*\n     * Remove all keys out of the storage.\n     */\n    /*\n       * Remove all keys out of the storage.\n       */\n    AlternativeStorage.prototype.clear = /*\n       * Remove all keys out of the storage.\n       */\n    function () {\n        this.storageMap = {};\n    };\n    /*\n     * Return the key's value\n     *\n     * @param key - name of the key to retrieve the value of.\n     * @return The key's value\n     */\n    /*\n       * Return the key's value\n       *\n       * @param key - name of the key to retrieve the value of.\n       * @return The key's value\n       */\n    AlternativeStorage.prototype.getItem = /*\n       * Return the key's value\n       *\n       * @param key - name of the key to retrieve the value of.\n       * @return The key's value\n       */\n    function (key) {\n        if (typeof this.storageMap[key] !== 'undefined') {\n            return this.storageMap[key];\n        }\n        return null;\n    };\n    /*\n     * Return the nth key in the storage\n     *\n     * @param index - the number of the key you want to get the name of.\n     * @return The name of the key.\n     */\n    /*\n       * Return the nth key in the storage\n       *\n       * @param index - the number of the key you want to get the name of.\n       * @return The name of the key.\n       */\n    AlternativeStorage.prototype.key = /*\n       * Return the nth key in the storage\n       *\n       * @param index - the number of the key you want to get the name of.\n       * @return The name of the key.\n       */\n    function (index) {\n        return Object.keys(this.storageMap)[index] || null;\n    };\n    /*\n     * Remove a key from the storage.\n     *\n     * @param key - the name of the key you want to remove.\n     */\n    /*\n       * Remove a key from the storage.\n       *\n       * @param key - the name of the key you want to remove.\n       */\n    AlternativeStorage.prototype.removeItem = /*\n       * Remove a key from the storage.\n       *\n       * @param key - the name of the key you want to remove.\n       */\n    function (key) {\n        this.storageMap[key] = undefined;\n    };\n    /*\n     * Add a key to the storage, or update a key's value if it already exists.\n     *\n     * @param key - the name of the key.\n     * @param value - the value you want to give to the key.\n     */\n    /*\n       * Add a key to the storage, or update a key's value if it already exists.\n       *\n       * @param key - the name of the key.\n       * @param value - the value you want to give to the key.\n       */\n    AlternativeStorage.prototype.setItem = /*\n       * Add a key to the storage, or update a key's value if it already exists.\n       *\n       * @param key - the name of the key.\n       * @param value - the value you want to give to the key.\n       */\n    function (key, value) {\n        this.storageMap[key] = value;\n    };\n    return AlternativeStorage;\n}());\n/*\n * Represents an alternative storage for browser that doesn't support localstorage. (i.e. Safari in\n * private mode)\n * @implements Storage\n */\nexport { AlternativeStorage };\n//# sourceMappingURL=alternativestorage.js.map",null]}