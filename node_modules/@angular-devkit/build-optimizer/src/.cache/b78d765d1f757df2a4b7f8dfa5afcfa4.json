{"remainingRequest":"/home/ict/cloudstack-ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/ict/cloudstack-ui/node_modules/@ng-idle/core/src/eventtargetinterruptsource.js","dependencies":[{"path":"/home/ict/cloudstack-ui/node_modules/@ng-idle/core/src/eventtargetinterruptsource.js","mtime":1522328033000},{"path":"/home/ict/cloudstack-ui/node_modules/cache-loader/dist/cjs.js","mtime":1534015689334},{"path":"/home/ict/cloudstack-ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/throttleTime';\nimport 'rxjs/add/observable/fromEvent';\nimport 'rxjs/add/observable/merge';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { InterruptArgs } from './interruptargs';\nimport { InterruptSource } from './interruptsource';\nvar defaultThrottleDelay = 500;\n/*\n * An interrupt source on an EventTarget object, such as a Window or HTMLElement.\n */\nvar /*\n * An interrupt source on an EventTarget object, such as a Window or HTMLElement.\n */ EventTargetInterruptSource = (function (_super) {\n    __extends(EventTargetInterruptSource, _super);\n    function EventTargetInterruptSource(target, events, options) {\n        var _this = _super.call(this, null, null) || this;\n        _this.target = target;\n        _this.events = events;\n        _this.eventSubscription = new Subscription();\n        if (typeof options === 'number') {\n            options = { throttleDelay: options, passive: false };\n        }\n        options = options || { throttleDelay: defaultThrottleDelay, passive: false };\n        if (options.throttleDelay === undefined || options.throttleDelay === null) {\n            options.throttleDelay = defaultThrottleDelay;\n        }\n        _this.throttleDelay = options.throttleDelay;\n        _this.passive = !!options.passive;\n        var opts = _this.passive ? { passive: true } : null;\n        var fromEvents = events.split(' ').map(function (eventName) { return Observable.fromEvent(target, eventName, opts); });\n        _this.eventSrc = Observable.merge.apply(Observable, fromEvents);\n        _this.eventSrc = _this.eventSrc.filter(function (innerArgs) { return !_this.filterEvent(innerArgs); });\n        if (_this.throttleDelay > 0) {\n            _this.eventSrc = _this.eventSrc.throttleTime(_this.throttleDelay);\n        }\n        var handler = function (innerArgs) { return _this.onInterrupt.emit(new InterruptArgs(_this, innerArgs)); };\n        _this.attachFn = function () { return _this.eventSubscription = _this.eventSrc.subscribe(handler); };\n        _this.detachFn = function () { return _this.eventSubscription.unsubscribe(); };\n        return _this;\n    }\n    /*\n     * Checks to see if the event should be filtered. Always returns false unless overriden.\n     * @param event - The original event object.\n     * @return True if the event should be filtered (don't cause an interrupt); otherwise, false.\n     */\n    /*\n       * Checks to see if the event should be filtered. Always returns false unless overriden.\n       * @param event - The original event object.\n       * @return True if the event should be filtered (don't cause an interrupt); otherwise, false.\n       */\n    EventTargetInterruptSource.prototype.filterEvent = /*\n       * Checks to see if the event should be filtered. Always returns false unless overriden.\n       * @param event - The original event object.\n       * @return True if the event should be filtered (don't cause an interrupt); otherwise, false.\n       */\n        function (event) {\n            return false;\n        };\n    Object.defineProperty(EventTargetInterruptSource.prototype, \"options\", {\n        /**\n         * Returns the current options being used.\n         * @return {EventTargetInterruptOptions} The current option values.\n         */\n        get: /**\n           * Returns the current options being used.\n           * @return {EventTargetInterruptOptions} The current option values.\n           */ function () {\n            return { throttleDelay: this.throttleDelay, passive: this.passive };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return EventTargetInterruptSource;\n}(InterruptSource));\n/*\n * An interrupt source on an EventTarget object, such as a Window or HTMLElement.\n */\nexport { EventTargetInterruptSource };\n//# sourceMappingURL=eventtargetinterruptsource.js.map \n",null]}