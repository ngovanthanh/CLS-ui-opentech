{"remainingRequest":"/home/ict/cloudstack-ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/ict/cloudstack-ui/node_modules/ng-dynamic-component/bundles/ng-dynamic-component.es5.js","dependencies":[{"path":"/home/ict/cloudstack-ui/node_modules/ng-dynamic-component/bundles/ng-dynamic-component.es5.js","mtime":1525297705000},{"path":"/home/ict/cloudstack-ui/node_modules/cache-loader/dist/cjs.js","mtime":1534015689334},{"path":"/home/ict/cloudstack-ui/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { InjectionToken, Directive, Host, Inject, Injector, Input, KeyValueDiffers, Optional, Renderer2, Component, ComponentFactoryResolver, EventEmitter, Output, ReflectiveInjector, ViewContainerRef, SimpleChange, ANALYZE_FOR_ENTRY_COMPONENTS, NgModule } from '@angular/core';\nimport { NgComponentOutlet, CommonModule } from '@angular/common';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ COMPONENT_INJECTOR = new InjectionToken('ComponentInjector');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar ComponentOutletInjectorDirective = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} componentOutlet\n     */\n    function ComponentOutletInjectorDirective(componentOutlet) {\n        this.componentOutlet = componentOutlet;\n    }\n    Object.defineProperty(ComponentOutletInjectorDirective.prototype, \"componentRef\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return ((this.componentOutlet))._componentRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ComponentOutletInjectorDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar DynamicAttributesDirective = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} renderer\n     * @param {?} differs\n     * @param {?} injector\n     * @param {?} componentInjectorType\n     * @param {?} componentOutletInjector\n     */\n    function DynamicAttributesDirective(renderer, differs, injector, componentInjectorType, componentOutletInjector) {\n        this.renderer = renderer;\n        this.differs = differs;\n        this.injector = injector;\n        this.componentInjectorType = componentInjectorType;\n        this.componentOutletInjector = componentOutletInjector;\n        this._attrsDiffer = this.differs.find({}).create();\n        this._componentInjector = this.injector.get(this.componentInjectorType, null);\n    }\n    Object.defineProperty(DynamicAttributesDirective.prototype, \"_attributes\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return (this.ndcDynamicAttributes || this.ngComponentOutletNdcDynamicAttributes);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DynamicAttributesDirective.prototype, \"_compInjector\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.componentOutletInjector || this._componentInjector;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DynamicAttributesDirective.prototype, \"_nativeElement\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._compInjector.componentRef.location.nativeElement;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DynamicAttributesDirective.prototype, \"_compType\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._compInjector.componentRef.componentType;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DynamicAttributesDirective.prototype, \"_isCompChanged\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (this._lastCompType !== this._compType) {\n                this._lastCompType = this._compType;\n                return true;\n            }\n            return false;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    DynamicAttributesDirective.prototype.ngDoCheck = function () {\n        var /** @type {?} */ isCompChanged = this._isCompChanged;\n        var /** @type {?} */ changes = this._attrsDiffer.diff(this._attributes);\n        if (changes) {\n            this._lastAttrActions = this._changesToAttrActions(changes);\n        }\n        if (changes || (isCompChanged && this._lastAttrActions)) {\n            this._updateAttributes(this._lastAttrActions);\n        }\n    };\n    /**\n     * @param {?} name\n     * @param {?} value\n     * @param {?=} namespace\n     * @return {?}\n     */\n    DynamicAttributesDirective.prototype.setAttribute = function (name, value, namespace) {\n        this.renderer.setAttribute(this._nativeElement, name, value, namespace);\n    };\n    /**\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    DynamicAttributesDirective.prototype.removeAttribute = function (name, namespace) {\n        this.renderer.removeAttribute(this._nativeElement, name, namespace);\n    };\n    /**\n     * @param {?} actions\n     * @return {?}\n     */\n    DynamicAttributesDirective.prototype._updateAttributes = function (actions) {\n        var _this = this;\n        Object.keys(actions.set).forEach(function (key) { return _this.setAttribute(key, actions.set[key]); });\n        actions.remove.forEach(function (key) { return _this.removeAttribute(key); });\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    DynamicAttributesDirective.prototype._changesToAttrActions = function (changes) {\n        var /** @type {?} */ attrActions = {\n            set: {},\n            remove: [],\n        };\n        changes.forEachAddedItem(function (r) { return (attrActions.set[r.key] = r.currentValue); });\n        changes.forEachChangedItem(function (r) { return (attrActions.set[r.key] = r.currentValue); });\n        changes.forEachRemovedItem(function (r) { return attrActions.remove.push(r.key); });\n        return attrActions;\n    };\n    return DynamicAttributesDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar DynamicComponent = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _vcr\n     * @param {?} _cfr\n     */\n    function DynamicComponent(_vcr, _cfr) {\n        this._vcr = _vcr;\n        this._cfr = _cfr;\n        this.ndcDynamicCreated = new EventEmitter();\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    DynamicComponent.prototype.ngOnChanges = function (changes) {\n        if (changes['ndcDynamicComponent']) {\n            this.createDynamicComponent();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DynamicComponent.prototype.createDynamicComponent = function () {\n        this._vcr.clear();\n        this.componentRef = null;\n        if (this.ndcDynamicComponent) {\n            this.componentRef = this._vcr.createComponent(this._cfr.resolveComponentFactory(this.ndcDynamicComponent), 0, this._resolveInjector(), this.ndcDynamicContent);\n            this.ndcDynamicCreated.emit(this.componentRef);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DynamicComponent.prototype._resolveInjector = function () {\n        var /** @type {?} */ injector = this.ndcDynamicInjector || this._vcr.parentInjector;\n        if (this.ndcDynamicProviders) {\n            injector = ReflectiveInjector.resolveAndCreate(this.ndcDynamicProviders, injector);\n        }\n        return injector;\n    };\n    return DynamicComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} val\n * @return {?}\n */\nfunction createNewChange(val) {\n    return new SimpleChange(undefined, val, true);\n}\n/**\n * @param {?} record\n * @param {?=} isFirstChange\n * @return {?}\n */\nfunction recordToChange(record, isFirstChange) {\n    if (isFirstChange === void 0) {\n        isFirstChange = false;\n    }\n    return isFirstChange\n        ? createNewChange(record.currentValue)\n        : new SimpleChange(record.previousValue, record.currentValue, false);\n}\n/**\n * @param {?} isFirstChanges\n * @param {?} setter\n * @return {?}\n */\nfunction setChangeFromRecord(isFirstChanges, setter) {\n    return function (record) { return setter(record, recordToChange(record, isFirstChanges)); };\n}\n/**\n * @param {?} isFirstChanges\n * @return {?}\n */\nfunction getChangesRecords(isFirstChanges) {\n    return function (changes) { return setChangeFromRecord(isFirstChanges, function (record, change) { return changes[record.key] = change; }); };\n}\n/**\n * @param {?} isFirstChanges\n * @return {?}\n */\nfunction getNewChangesRecords(isFirstChanges) {\n    return function (changes) {\n        return setChangeFromRecord(isFirstChanges, function (record, change) {\n            if (!changes[record.key]) {\n                changes[record.key] = change;\n            }\n        });\n    };\n}\nvar /** @type {?} */ defaultOpts = {\n    isFirstChanges: false,\n    onlyNewChanges: false,\n};\n/**\n * @param {?=} opts\n * @return {?}\n */\nfunction changesFromRecord(opts) {\n    if (opts === void 0) {\n        opts = defaultOpts;\n    }\n    return opts.onlyNewChanges\n        ? getNewChangesRecords(opts.isFirstChanges)\n        : getChangesRecords(opts.isFirstChanges);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ recordToChanges = changesFromRecord({ isFirstChanges: true });\nvar /** @type {?} */ recordToNewChanges = changesFromRecord({ onlyNewChanges: true });\nvar DynamicDirective = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} _differs\n     * @param {?} _injector\n     * @param {?} _cfr\n     * @param {?} _componentInjectorType\n     * @param {?} _componentOutletInjector\n     */\n    function DynamicDirective(_differs, _injector, _cfr, _componentInjectorType, _componentOutletInjector) {\n        this._differs = _differs;\n        this._injector = _injector;\n        this._cfr = _cfr;\n        this._componentInjectorType = _componentInjectorType;\n        this._componentOutletInjector = _componentOutletInjector;\n        this._componentInjector = this._injector.get(this._componentInjectorType, null);\n        this._lastComponentInst = this._componentInjector;\n        this._inputsDiffer = this._differs.find({}).create();\n        this._compFactory = null;\n        this._outputsShouldDisconnect$ = new Subject();\n    }\n    Object.defineProperty(DynamicDirective.prototype, \"_inputs\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.ndcDynamicInputs || this.ngComponentOutletNdcDynamicInputs;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DynamicDirective.prototype, \"_outputs\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.ndcDynamicOutputs || this.ngComponentOutletNdcDynamicOutputs;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DynamicDirective.prototype, \"_compInjector\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._componentOutletInjector || this._componentInjector;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DynamicDirective.prototype, \"_compRef\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._compInjector.componentRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DynamicDirective.prototype, \"_componentInst\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._compRef.instance;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DynamicDirective.prototype, \"_componentInstChanged\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            if (this._lastComponentInst !== this._componentInst) {\n                this._lastComponentInst = this._componentInst;\n                return true;\n            }\n            else {\n                return false;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    DynamicDirective.prototype.ngOnChanges = function (changes) {\n        var /** @type {?} */ compChanged = this._componentInstChanged;\n        if (compChanged || this._inputsChanged(changes)) {\n            var /** @type {?} */ inputsChanges = this._getInputsChanges(this._inputs);\n            if (inputsChanges) {\n                this._updateInputChanges(inputsChanges);\n            }\n            this.updateInputs(compChanged || !this._lastInputChanges);\n        }\n        if (compChanged || this._outputsChanged(changes)) {\n            this.bindOutputs();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DynamicDirective.prototype.ngDoCheck = function () {\n        if (this._componentInstChanged) {\n            this.updateInputs(true);\n            this.bindOutputs();\n            return;\n        }\n        var /** @type {?} */ inputs = this._inputs;\n        if (!inputs) {\n            return;\n        }\n        var /** @type {?} */ inputsChanges = this._getInputsChanges(this._inputs);\n        if (inputsChanges) {\n            var /** @type {?} */ isNotFirstChange = !!this._lastInputChanges;\n            this._updateInputChanges(inputsChanges);\n            if (isNotFirstChange) {\n                this.updateInputs();\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DynamicDirective.prototype.ngOnDestroy = function () {\n        this._disconnectOutputs();\n    };\n    /**\n     * @param {?=} isFirstChange\n     * @return {?}\n     */\n    DynamicDirective.prototype.updateInputs = function (isFirstChange) {\n        if (isFirstChange === void 0) {\n            isFirstChange = false;\n        }\n        if (isFirstChange) {\n            this._updateCompFactory();\n        }\n        var /** @type {?} */ compInst = this._componentInst;\n        var /** @type {?} */ inputs = this._inputs;\n        if (!inputs || !compInst) {\n            return;\n        }\n        inputs = this._resolveInputs(inputs);\n        Object\n            .keys(inputs)\n            .forEach(function (p) { return compInst[p] = inputs[p]; });\n        this.notifyOnInputChanges(this._lastInputChanges, isFirstChange);\n    };\n    /**\n     * @return {?}\n     */\n    DynamicDirective.prototype.bindOutputs = function () {\n        var _this = this;\n        this._disconnectOutputs();\n        var /** @type {?} */ compInst = this._componentInst;\n        var /** @type {?} */ outputs = this._outputs;\n        if (!outputs || !compInst) {\n            return;\n        }\n        outputs = this._resolveOutputs(outputs);\n        Object.keys(outputs)\n            .filter(function (p) { return compInst[p]; })\n            .forEach(function (p) {\n            return compInst[p]\n                .pipe(takeUntil(_this._outputsShouldDisconnect$))\n                .subscribe(outputs[p]);\n        });\n    };\n    /**\n     * @param {?=} changes\n     * @param {?=} forceFirstChanges\n     * @return {?}\n     */\n    DynamicDirective.prototype.notifyOnInputChanges = function (changes, forceFirstChanges) {\n        if (changes === void 0) {\n            changes = {};\n        }\n        // Exit early if component not interested to receive changes\n        if (!this._componentInst.ngOnChanges) {\n            return;\n        }\n        if (forceFirstChanges) {\n            changes = this._collectFirstChanges();\n        }\n        this._componentInst.ngOnChanges(changes);\n    };\n    /**\n     * @return {?}\n     */\n    DynamicDirective.prototype._disconnectOutputs = function () {\n        this._outputsShouldDisconnect$.next();\n    };\n    /**\n     * @param {?} inputs\n     * @return {?}\n     */\n    DynamicDirective.prototype._getInputsChanges = function (inputs) {\n        return this._inputsDiffer.diff(this._inputs);\n    };\n    /**\n     * @param {?} differ\n     * @return {?}\n     */\n    DynamicDirective.prototype._updateInputChanges = function (differ) {\n        this._lastInputChanges = this._collectChangesFromDiffer(differ);\n    };\n    /**\n     * @return {?}\n     */\n    DynamicDirective.prototype._collectFirstChanges = function () {\n        var /** @type {?} */ changes = ({});\n        var /** @type {?} */ inputs = this._inputs;\n        Object.keys(inputs).forEach(function (prop) { return changes[prop] = createNewChange(inputs[prop]); });\n        return this._resolveChanges(changes);\n    };\n    /**\n     * @param {?} differ\n     * @return {?}\n     */\n    DynamicDirective.prototype._collectChangesFromDiffer = function (differ) {\n        var /** @type {?} */ changes = ({});\n        differ.forEachAddedItem(recordToChanges(changes));\n        differ.forEachItem(recordToNewChanges(changes));\n        return this._resolveChanges(changes);\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    DynamicDirective.prototype._inputsChanged = function (changes) {\n        return 'ngComponentOutletNdcDynamicInputs' in changes || 'ndcDynamicInputs' in changes;\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    DynamicDirective.prototype._outputsChanged = function (changes) {\n        return 'ngComponentOutletNdcDynamicOutputs' in changes || 'ndcDynamicOutputs' in changes;\n    };\n    /**\n     * @return {?}\n     */\n    DynamicDirective.prototype._resolveCompFactory = function () {\n        try {\n            try {\n                return this._cfr.resolveComponentFactory(this._compRef.componentType);\n            }\n            catch (e) {\n                // Fallback if componentType does not exist (happens on NgComponentOutlet)\n                return this._cfr.resolveComponentFactory(this._compRef.instance.constructor);\n            }\n        }\n        catch (e) {\n            // Factory not available - bailout\n            return null;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DynamicDirective.prototype._updateCompFactory = function () {\n        this._compFactory = this._resolveCompFactory();\n    };\n    /**\n     * @param {?} inputs\n     * @return {?}\n     */\n    DynamicDirective.prototype._resolveInputs = function (inputs) {\n        if (!this._compFactory) {\n            return inputs;\n        }\n        return this._remapIO(inputs, this._compFactory.inputs);\n    };\n    /**\n     * @param {?} outputs\n     * @return {?}\n     */\n    DynamicDirective.prototype._resolveOutputs = function (outputs) {\n        if (!this._compFactory) {\n            return outputs;\n        }\n        return this._remapIO(outputs, this._compFactory.outputs);\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    DynamicDirective.prototype._resolveChanges = function (changes) {\n        if (!this._compFactory) {\n            return changes;\n        }\n        return this._remapIO(changes, this._compFactory.inputs);\n    };\n    /**\n     * @param {?} io\n     * @param {?} mapping\n     * @return {?}\n     */\n    DynamicDirective.prototype._remapIO = function (io, mapping) {\n        var _this = this;\n        var /** @type {?} */ newIO = {};\n        Object.keys(io)\n            .forEach(function (key) {\n            var /** @type {?} */ newKey = _this._findPropByTplInMapping(key, mapping) || key;\n            newIO[newKey] = io[key];\n        });\n        return newIO;\n    };\n    /**\n     * @param {?} tplName\n     * @param {?} mapping\n     * @return {?}\n     */\n    DynamicDirective.prototype._findPropByTplInMapping = function (tplName, mapping) {\n        for (var _i = 0, mapping_1 = mapping; _i < mapping_1.length; _i++) {\n            var map = mapping_1[_i];\n            if (map.templateName === tplName) {\n                return map.propName;\n            }\n        }\n        return null;\n    };\n    return DynamicDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar DynamicModule = /*@__PURE__*/ (function () {\n    function DynamicModule() {\n    }\n    /**\n     * @param {?} components\n     * @param {?=} componentInjector\n     * @return {?}\n     */\n    DynamicModule.withComponents = function (components, componentInjector) {\n        if (componentInjector === void 0) {\n            componentInjector = DynamicComponent;\n        }\n        return {\n            ngModule: DynamicModule,\n            providers: [\n                {\n                    provide: ANALYZE_FOR_ENTRY_COMPONENTS,\n                    useValue: components,\n                    multi: true,\n                },\n                { provide: COMPONENT_INJECTOR, useValue: componentInjector },\n            ],\n        };\n    };\n    return DynamicModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nexport { DynamicModule, DynamicDirective, DynamicComponent, DynamicAttributesDirective, COMPONENT_INJECTOR as ɵa, ComponentOutletInjectorDirective as ɵb };\n",null]}